{"version":3,"sources":["components/Section/StyledSectionComponents.jsx","components/Section/Section.jsx","components/FeedbackOptions/StyledFeedbackOptionComponents.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/NotificationComponent/StyledNotificationComponents.jsx","components/Statistics/StyledStatisticsComponents.jsx","components/Statistics/Statistics.jsx","components/NotificationComponent/Notification.jsx","components/AppComponent/StyledApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["StyledSection","styled","section","StyledTitle","h1","Section","title","children","StyledFeedbackOptions","div","StyledButton","button","FeedbackOptions","options","onLeaveFeedback","emoji","good","neutral","bad","buttons","Object","keys","map","option","index","type","value","onClick","String","fromCodePoint","StyledDiv","StyledSubtitle","h2","StyledList","ul","StyledItem","li","StyledSpan","span","Statistics","total","positivePercentage","formatValue","duration","Notification","message","StyledApp","App","useState","setGood","setBad","setNeutral","increment","countTotalFeedback","res","Math","floor","Number","isNaN","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12e01656.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  background-color: #e6faf5;\n  padding: 1rem 2rem;\n  border: 1px solid #6723ba;\n  border-radius: 1rem;\n  box-shadow: 7px 7px 15px -8px rgba(0, 0, 0, 0.56);\n  font-family: Open Sans;\n`;\n\nexport const StyledTitle = styled.h1`\n  margin: 0 0 1.5rem;\n  text-align: center;\n  color: #6723ba;\n  text-transform: uppercase;\n\n  font-size: 2.25rem;\n`;\n","import { StyledSection, StyledTitle } from './StyledSectionComponents';\n\nconst Section = ({ title, children }) => {\n  return (\n    <StyledSection>\n      <StyledTitle>{title}</StyledTitle>\n      {children}\n    </StyledSection>\n  );\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const StyledFeedbackOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  margin-bottom: 1rem;\n\n  @media (min-width: 480px) {\n    flex-direction: row;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  min-width: 160px;\n\n  background-color: #e6e6e6;\n  border: 1px solid #6723ba;\n  border-radius: 0.5rem;\n  padding: 0.5rem 1.5rem;\n  cursor: pointer;\n  font-size: 1.5rem;\n  color: #6723ba;\n\n  margin-bottom: 1rem;\n\n  transition: background-color 250ms ease-in-out;\n\n  @media (min-width: 480px) {\n    margin-bottom: 0;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: #fafafa;\n  }\n`;\n","import { StyledButton, StyledFeedbackOptions } from './StyledFeedbackOptionComponents';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  const emoji = { good: 0x1f600, neutral: 0x1f610, bad: 0x1f615 };\n\n  const buttons = Object.keys(options).map((option, index) => {\n    return (\n      <StyledButton key={index} type=\"button\" value={option} onClick={() => onLeaveFeedback(option)}>\n        {`${String.fromCodePoint(emoji[option])} `}\n        {option}\n      </StyledButton>\n    );\n  });\n\n  return <StyledFeedbackOptions>{buttons}</StyledFeedbackOptions>;\n};\n\nexport default FeedbackOptions;\n","import styled from 'styled-components';\n\nexport const StyledDiv = styled.section`\n  background-color: #e6faf5;\n  padding: 1rem 2rem;\n`;\n\nexport const StyledSubtitle = styled.h2`\n  text-align: center;\n  color: #6723ba;\n  text-transform: uppercase;\n`;\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n\n  margin: -1rem;\n`;\n\nexport const StyledSubtitle = styled.h2`\n  text-align: center;\n  color: #6723ba;\n  text-transform: uppercase;\n  font-size: 2rem;\n\n  margin-bottom: 1rem;\n`;\n\nexport const StyledItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  font-weight: 600;\n  font-size: 1.5rem;\n\n  margin: 1rem;\n`;\n\nexport const StyledSpan = styled.span`\n  font-weight: 800;\n  color: #6723ba;\n  font-size: 1.5rem;\n\n  margin-top: 0.5rem;\n`;\n","import { StyledDiv } from '../NotificationComponent/StyledNotificationComponents';\nimport { StyledList, StyledItem, StyledSubtitle, StyledSpan } from './StyledStatisticsComponents';\n\nimport AnimatedNumber from 'animated-number-react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage, formatValue }) => {\n  return (\n    <StyledDiv>\n      <StyledSubtitle>Statistics</StyledSubtitle>\n      <StyledList>\n        <StyledItem>\n          Good: <StyledSpan>{good}</StyledSpan>\n        </StyledItem>\n        <StyledItem>\n          Bad: <StyledSpan>{bad}</StyledSpan>\n        </StyledItem>\n        <StyledItem>\n          Neutral: <StyledSpan>{neutral}</StyledSpan>\n        </StyledItem>\n        <StyledItem>\n          Total: <StyledSpan>{total}</StyledSpan>\n        </StyledItem>\n        <StyledItem>\n          Positive feedback:\n          <StyledSpan>\n            <AnimatedNumber value={positivePercentage} duration={300} formatValue={formatValue} />%\n          </StyledSpan>\n        </StyledItem>\n      </StyledList>\n    </StyledDiv>\n  );\n};\n\nexport default Statistics;\n","import { StyledDiv, StyledSubtitle } from './StyledNotificationComponents';\n\nconst Notification = ({ message }) => {\n  return (\n    <StyledDiv>\n      <StyledSubtitle>{message}</StyledSubtitle>\n    </StyledDiv>\n  );\n};\n\nexport default Notification;\n","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  width: 600px;\n  margin: 1rem auto;\n`;\n","import { useState } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/NotificationComponent/Notification';\nimport { StyledApp } from './components/AppComponent/StyledApp';\nimport { useEffect } from 'react/cjs/react.development';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n\n  const increment = (value) => (value += 1);\n\n  const onFeedbackClick = (option) => {\n    switch (option) {\n      case 'good':\n        setGood(increment);\n        break;\n      case 'bad':\n        setBad(increment);\n        break;\n      case 'neutral':\n        setNeutral(increment);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const res = Math.floor((good / countTotalFeedback()) * 100);\n    return !Number.isNaN(res) ? res : 0;\n  };\n\n  const formatValue = (value) => {\n    return `${Number(value).toFixed(0)}`;\n  };\n\n  return (\n    <StyledApp>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={{ good, bad, neutral }} onLeaveFeedback={onFeedbackClick} />\n        {countTotalFeedback() !== 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage}\n            formatValue={formatValue}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}